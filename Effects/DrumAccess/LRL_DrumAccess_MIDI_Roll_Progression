desc: DrumAccess MIDI Roll Progression (LRL ReaperAccessible)
version: 1.2
author: cfillion
moddification: par louis-rock lampron
assisted: chatgpt
about:
  # MIDI Taps Repeater

  Repeat MIDI notes *n* times after a delay set in beats until released.

  If the "Taps" parameter is set to 0 the note is repeated forever (or until velocity reaches zero).
modification:
The parameter order is now more intuitive.

The progression parameter allows for a bounce effect to simulate more realistic rolls.
  This parameter works as follows:
  A value of 1 (default) keeps the speed stable.
  A lower value increases speed over time, while a higher value slows it down.

Number of progression cycles
  Specifies how many repetitions occur before the speed stabilizes.
Starting velocity
  Sets the initial velocity for the roll.
  A value of 0 means the velocity played on the keyboard is used instead.
  This parameter can be adjusted during the roll.
  By linking it to a MIDI controller, via the "velocity CC Access" parameter,
  it's possible to create a real-time velocity curve.
High and low note limits
  Define the note range that will trigger the roll.
  You can also set these limits using your MIDI keyboard
  by enabling either the "Select low note" or "Select high note" parameters
  (via the JSFX interface).
  Then play a note on your MIDI keyboard.
  That note will immediately become the new low or high note.
  Once selected, the option is automatically disabled.
High and low velocity limits
  Define the velocity range that will trigger the roll.
Stop roll when the note is off
  Enable this parameter to do so.

slider1:in_chan=0<0,16,1{Omni,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Input Channel
slider2:taps=1<0,64,1>Number of repetitions
slider3:delay=0.5<0,4>Offset (Time in beats)
slider4:repeat_speed=1<0,2,0.01>Progression speed
slider5:max_taps_progress=100<1,100,1>Number of progression cycles
slider6:vel_scale=1<0,1>Descending velocity scale
slider7:vel_start=0<0,127,1>Starting velocity
slider8:vel_start_cc=-1<-1,127,1>velocity CC Access: (-1 = Off)
slider9:select_cc=0<0,1,1{Disabled,Enabled}>Select CC Via MIDI Keyboard
slider10:vel_min=1<1,127,1>Low velocity limit
slider11:vel_max=127<1,127,1>High velocity limit
slider12:low_key=0<0,127>Lowest note
slider13:hi_key=127<0,127>Highest note
slider14:select_low_key=0<0,1,1{Disabled,Enabled}>Select Low Note Via MIDI Keyboard
slider15:select_hi_key=0<0,1,1{Disabled,Enabled}>Select High Note Via MIDI Keyboard
slider16:chknoteoff=0<0,1,1{Disabled,Enabled}>Stop Roll When The Note Is Off:

@init
BUFSIZE = 128;

notebuf = 0;
memset(notebuf, 0, BUFSIZE);

chanbuf = notebuf + BUFSIZE;
memset(chanbuf, 0, BUFSIZE);

velbuf = chanbuf + BUFSIZE;
memset(velbuf, 0, BUFSIZE);

tapsbuf = velbuf + BUFSIZE;
memset(tapsbuf, 0, BUFSIZE);

pos = 0;

repeat_factor = repeat_speed; // initialisation de la vitesse de répétition
act_progress = 0; // pour compter le nombre de progression jusqu'à la limite spécifié par l'utilisateur

// fonction pour ajuster la vélocité de toutes les notes
function ajustvel(avel)
(
  inote=0;
  loop(128,
    velbuf[inote]=avel;
    inote +=1;
  );
);
// Fonction clamp pour limiter une valeur entre un minimum et un maximum
function clamp(val, min, max)
(
  val < min ? min : (val > max ? max : val);
);

function repeatNote(note)
(
  velbuf[note] *= vel_scale;

  midisend(offset, $x90 + chanbuf[note], note, velbuf[note]);
  midisend(offset, $x90 + chanbuf[note], note, 0);

  tapsbuf[note] += 1;
  notebuf[note] = (!taps || tapsbuf[note] < taps) && velbuf[note] > 0 ? pos : 0;

  // Si le nombre de progression spécifié n'est pas atteint
  act_progress < max_taps_progress ? (
    act_progress += 1;
    // Appliquer la vitesse de répétition progressive
    repeat_factor *= repeat_speed; // ajuster la vitesse de répétition
    // Limiter pour éviter qu'il n'atteigne des valeurs trop petites ou grandes
    repeat_factor = clamp(repeat_factor, 0.1, 10);
  );
);

function beats2time(val)
(
  val * (tempo / ts_denom / 60);
);

function isOverDelay(note)
(
  delay && notebuf[note] && pos >= notebuf[note] + beats2time(delay * repeat_factor); // Appliquer la vitesse de répétition
);

@slider
// Sécurité des paramètres 
savvelmin!=vel_min ? (
  vel_min > vel_max ? vel_min = vel_max;
  savvelmin = vel_min;);
savvelmax!=vel_max ? (
  vel_max < vel_min ? vel_max = vel_min;
  savvelmax = vel_max;);
savlokey!=low_key ? (
  low_key > hi_key ? low_key = hi_key;
  savlokey = low_key;);
savhikey!=hi_key ? (
  hi_key < low_key ? hi_key = low_key;
  savhikey = hi_key;);
savechknoteoff != chknoteoff ? (
  savechknoteoff = chknoteoff;
  chknoteoff == 0 && taps == 0 ? taps=1;
);
savetaps != taps ? (
  savetaps = taps;  
  taps == 0 ? chknoteoff = 1;
);
// normal
vel_start ? ajustvel(vel_start);

@block
pos += samplesblock / srate;
// process new midi events
while(midirecv(offset, msg, note, vel)) (
  type = msg & 0xf0;
  chan = msg & 0x0f;

  type == $xB0 ? (
    note == vel_start_cc ? ( 
      vel_start = vel;
      // note=lastnote;
      ajustvel(vel);
      sliderchange(vel_start);
    );
  );
  type == $x80 ? ( // note off
    chknoteoff ? (
      notebuf[note] = 0;
      repeat_factor = repeat_speed; // Réinitialiser le facteur à sa valeur initiale
      act_progress = 0;
    );
    // type = $x90;
    vel = 0;
  );

  // Mode sélection de cc
  select_cc && type == $xB0 ? (
    vel_start_cc = note;
    select_cc = 0; // Désactiver après la sélection
  );
  // Mode sélection de note basse
  select_low_key && vel > 0 ? (
    low_key = note;
    select_low_key = 0; // Désactiver après la sélection
  );

  // Mode sélection de note haute
  select_hi_key && vel > 0 ? (
    hi_key = note;
    select_hi_key = 0; // Désactiver après la sélection
  );

  capture = (!in_chan || (in_chan-1) == chan) &&
    note >= low_key && note <= hi_key &&
    vel >= vel_min && vel <= vel_max;

  type == $x90 && capture ? ( // note message
    vel > 0 ? (
      // note on
      lastnote = note;
      notebuf[note] = pos;
      chanbuf[note] = chan;
      vel_start ?
        velbuf[note] = vel_start :
        velbuf[note] = vel;
      tapsbuf[note] = 0;
      repeat_factor = repeat_speed; // Réinitialiser le facteur à sa valeur initiale
      act_progress = 0;
    ) : notebuf[note] ? (
      // note off
      notebuf[note] = 0;
      repeat_factor = repeat_speed; // Réinitialiser le facteur à sa valeur initiale
      act_progress = 0;
    );
  );

  midisend(offset, msg, note, vel);
);

i = 0;
loop(BUFSIZE, (
  isOverDelay(i) ? repeatNote(i);
  i += 1;
));

